//
// Copyright (c) 2014-2019 by 1801BM1@gmail.com
//
// 1801VM2 programmable logic matrices (PLM)
//______________________________________________________________________________
//
// Main microcode inputs description:
//
//    ir[15:0] - instruction code latched in instruction register (opcode)
//    ix[2:0]  - aux conditions from predecoder
//    ri[2:0]  - interrupt unit query register
//    ia[5:0]  - microinstruction address
//
// Outputs:
//
//    plm[8]   - microinstruction type selection
//    plm[0]      x0 - system control register strobe
//                01 - two operand microinstruction (x, y)
//                11 - one operand microinstruction (x, const/vector)
//
//    plm[2]   - write result target
//    plm[3]      000   - y
//    plm[29]     001   - x
//                010   - acc
//                011   - x, fr1, fr (address register, read phase)
//                101   - x, fr
//                110   - acc, fw (address register, write phase)
//                111   - x, fw
//
//    plm[9:12] - y operand for two-ops microinstruction
//    plm[4]    - x operand
//    plm[5]      0000  - R0
//    plm[6]      0001  - R1
//    plm[7]      0010  - R2
//                0011  - R3
//                0100  - R4
//                0101  - R5
//                0110  - R6
//                0111  - R7
//                1000  - EA_RA1 (Extended Arithmetics Register 1)
//                1001  - EA_RA2 (Extended Arithmetics Register 2)
//                1010  - EA_CNT (Extended Arithmetics Counter), no connection
//                1011  - SRC (Source Register))
//                1100  - PSW
//                1101  - ACC (Accumulator)
//                1110  - AREG (QBus Address), no connection
//                1111  - QREG (QBus Data)
//
//    plm[9]    - constant/vector selector for single-op microinstruction
//    plm[10]     0000  - psw                - PSW
//    plm[11]     0001  - 00000000iiiiiii0   - offset from opcode, MARK, SOB
//    plm[12]     0010  - 000001             - INC, DEC
//                0011  - 000002             - INC
//                0100  - 000000             - CLR
//                0101  - 000004
//                0110  - cpsw               - copy PSW
//                0111  - bir                - command buffer (prefetched 2nd/3rd word)
//                1000  - branch             - sign extended offset in BR instruction
//                1001  - nnnnnnnnnnnnnnnn   - result sign extention
//                1010  - 000000000000000c   - C flag
//                1011  - 000020
//                1100  - vector             - defined by vsel, see the next table
//                1101  - 000024
//                1110  - cpc                - copy of PC
//                1111  - cpc                - copy of PC
//
//    plm[13]     - ALU operation
//    plm[14]     00000 -  y
//    plm[15]     00001 - ~y
//    plm[16]     01000 - ~x
//    plm[17]     01001 -  x
//                10001 -  x-y
//                11000: op = " y-x";
//                11001: op = " x+y";
//                10000: op = " x^y";
//                10010: op = " x|y";
//                10100: op = " x&y";
//                10101: op = "x&~y";
//
//    plm[20:17]
//    vsel[0:3] - vector index
//                0000  - 000030
//                0001  - 000020
//                0010  - 000010
//                0011  - 000014
//                0100  - 000004
//                0101  - 000174
//                0110  - 000000
//                1000  - 000250
//                1001  - 000024
//                1010  - 000100
//                1011  - 000170
//                1100  - 000034
//                1101  - 000274
//
//    plm[20:18]  - ALU result shift mode
//                000   - not used
//                001   - not used
//                010   - shift right, arithmetic, msb replicated
//                011   - shift right, param bit shifted in
//                100   - shift left, zero shited in
//                101   - shift left, param bit shifted in
//                110   - no shift
//                111   - no shift, byte xchg
//
//    plm[36:31] - next microinstruction address [5:0]
//
// System control outputs (sp[0] == 0):
//    sp[3:1]  - interrupt reason register (ri[0:2])
//    sp[13]   - INIT output set (INIT reset is done by timer)
//    sp[14]   - go to waiting state
//    sp[15]   - reset interrupt source
//    sp[20:17] - set vector vsel[0:3]
//
module vm2_plm
(
   input  [15:0] ir,
   input  [2:0]  ix,
   input  [2:0]  ri,
   input  [5:0]  ia,
   output [36:0] sp
);
wire [199:2] p;
wire [36:0] pl;

assign p[  2] = (({ir, ix, ri, ia} & 28'b0000000000000111000000111011) == 28'b0000000000000111000000110011) ? 1'b1 : 1'b0;
assign p[  3] = (({ir, ix, ri, ia} & 28'b0000000000110000000000101111) == 28'b0000000000110000000000001100) ? 1'b1 : 1'b0;
assign p[  4] = (({ir, ix, ri, ia} & 28'b0000000000110000000000111010) == 28'b0000000000110000000000110010) ? 1'b1 : 1'b0;
assign p[  5] = (({ir, ix, ri, ia} & 28'b0000101111000000100000111001) == 28'b0000101010000000000000001000) ? 1'b1 : 1'b0;
assign p[  6] = (({ir, ix, ri, ia} & 28'b1011000000000000000000010111) == 28'b0010000000000000000000000100) ? 1'b1 : 1'b0;
assign p[  7] = (({ir, ix, ri, ia} & 28'b0000010110000000100000111011) == 28'b0000010000000000000000001000) ? 1'b1 : 1'b0;
assign p[  8] = (({ir, ix, ri, ia} & 28'b0000000000111000000100111111) == 28'b0000000000000000000100001101) ? 1'b1 : 1'b0;
assign p[  9] = (({ir, ix, ri, ia} & 28'b0000100000111100000010111111) == 28'b0000000000011100000010111010) ? 1'b1 : 1'b0;
assign p[ 10] = (({ir, ix, ri, ia} & 28'b0000111000000000000000111111) == 28'b0000001000000000000000011000) ? 1'b1 : 1'b0;
assign p[ 11] = (({ir, ix, ri, ia} & 28'b0000000000000111000000010011) == 28'b0000000000000111000000000000) ? 1'b1 : 1'b0;
assign p[ 12] = (({ir, ix, ri, ia} & 28'b0000011000000000000000110111) == 28'b0000001000000000000000110001) ? 1'b1 : 1'b0;
assign p[ 13] = (({ir, ix, ri, ia} & 28'b0000100000111110000010111111) == 28'b0000000000011010000010111010) ? 1'b1 : 1'b0;
assign p[ 14] = (({ir, ix, ri, ia} & 28'b0000111000000000000000111111) == 28'b0000010000000000000000001010) ? 1'b1 : 1'b0;
assign p[ 15] = (({ir, ix, ri, ia} & 28'b0000000000000000000100110110) == 28'b0000000000000000000100110100) ? 1'b1 : 1'b0;
assign p[ 16] = (({ir, ix, ri, ia} & 28'b0111000000000000000000010111) == 28'b0101000000000000000000000100) ? 1'b1 : 1'b0;
assign p[ 17] = (({ir, ix, ri, ia} & 28'b0001100000000000010000111011) == 28'b0001100000000000010000001010) ? 1'b1 : 1'b0;
assign p[ 18] = (({ir, ix, ri, ia} & 28'b0000000000111000000000111111) == 28'b0000000000000000000000001101) ? 1'b1 : 1'b0;
assign p[ 19] = (({ir, ix, ri, ia} & 28'b0100001111000000100000111001) == 28'b0000001101000000000000001000) ? 1'b1 : 1'b0;
assign p[ 20] = (({ir, ix, ri, ia} & 28'b0000010100000000000000111111) == 28'b0000000100000000000000111010) ? 1'b1 : 1'b0;
assign p[ 21] = (({ir, ix, ri, ia} & 28'b0001011000000000000000011111) == 28'b0001000000000000000000010011) ? 1'b1 : 1'b0;
assign p[ 22] = (({ir, ix, ri, ia} & 28'b0111100000000000000000010111) == 28'b0111100000000000000000000100) ? 1'b1 : 1'b0;
assign p[ 23] = (({ir, ix, ri, ia} & 28'b0000000000000000000110011111) == 28'b0000000000000000000110011001) ? 1'b1 : 1'b0;
assign p[ 24] = (({ir, ix, ri, ia} & 28'b0111000000000000000000010111) == 28'b0100000000000000000000000100) ? 1'b1 : 1'b0;
assign p[ 25] = (({ir, ix, ri, ia} & 28'b0001000000111000000000111111) == 28'b0000000000000000000000011000) ? 1'b1 : 1'b0;
assign p[ 26] = (({ir, ix, ri, ia} & 28'b0000000000000000100000111111) == 28'b0000000000000000100000001100) ? 1'b1 : 1'b0;
assign p[ 27] = (({ir, ix, ri, ia} & 28'b0000000110000000000000001110) == 28'b0000000100000000000000000100) ? 1'b1 : 1'b0;
assign p[ 28] = (({ir, ix, ri, ia} & 28'b0000111000000000011000111010) == 28'b0000010000000000011000110000) ? 1'b1 : 1'b0;
assign p[ 29] = (({ir, ix, ri, ia} & 28'b0000100000111011000000111111) == 28'b0000000000000011000000111010) ? 1'b1 : 1'b0;
assign p[ 30] = (({ir, ix, ri, ia} & 28'b0000000000000000010000111111) == 28'b0000000000000000010000010010) ? 1'b1 : 1'b0;
assign p[ 31] = (({ir, ix, ri, ia} & 28'b0000000110000000000000001111) == 28'b0000000010000000000000000101) ? 1'b1 : 1'b0;
assign p[ 32] = (({ir, ix, ri, ia} & 28'b0001000100000100000000111111) == 28'b0000000000000100000000001010) ? 1'b1 : 1'b0;
assign p[ 33] = (({ir, ix, ri, ia} & 28'b0000000000111000000100111011) == 28'b0000000000000000000100110000) ? 1'b1 : 1'b0;
assign p[ 34] = (({ir, ix, ri, ia} & 28'b0000011000000000000000011111) == 28'b0000011000000000000000010011) ? 1'b1 : 1'b0;
assign p[ 35] = (({ir, ix, ri, ia} & 28'b0000011000000000000000011111) == 28'b0000000000000000000000000101) ? 1'b1 : 1'b0;
assign p[ 36] = (({ir, ix, ri, ia} & 28'b0000100000100000000000111111) == 28'b0000000000100000000000111010) ? 1'b1 : 1'b0;
assign p[ 37] = (({ir, ix, ri, ia} & 28'b0000000000111000000000111011) == 28'b0000000000000000000000110000) ? 1'b1 : 1'b0;
assign p[ 38] = (({ir, ix, ri, ia} & 28'b0000000000000000000100111101) == 28'b0000000000000000000000101100) ? 1'b1 : 1'b0;
assign p[ 39] = (({ir, ix, ri, ia} & 28'b0001000000111001000000111111) == 28'b0000000000011001000000011000) ? 1'b1 : 1'b0;
assign p[ 40] = (({ir, ix, ri, ia} & 28'b0100000100001100010000111011) == 28'b0000000000001000000000001010) ? 1'b1 : 1'b0;
assign p[ 41] = (({ir, ix, ri, ia} & 28'b0000011000000000000000011101) == 28'b0000011000000000000000000101) ? 1'b1 : 1'b0;
assign p[ 42] = (({ir, ix, ri, ia} & 28'b0000110000000000000000111011) == 28'b0000000000000000000000110000) ? 1'b1 : 1'b0;
assign p[ 43] = (({ir, ix, ri, ia} & 28'b1000010111000000100000111001) == 28'b1000010111000000000000001000) ? 1'b1 : 1'b0;
assign p[ 44] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000101101) ? 1'b1 : 1'b0;
assign p[ 45] = (({ir, ix, ri, ia} & 28'b0000100000111111000010111111) == 28'b0000000000011000000010111010) ? 1'b1 : 1'b0;
assign p[ 46] = (({ir, ix, ri, ia} & 28'b0000100000110000000010111111) == 28'b0000000000010000000000111010) ? 1'b1 : 1'b0;
assign p[ 47] = (({ir, ix, ri, ia} & 28'b0000001100000010000000111111) == 28'b0000000000000000000000100110) ? 1'b1 : 1'b0;
assign p[ 48] = (({ir, ix, ri, ia} & 28'b0001010000000000000000111111) == 28'b0001000000000000000000110011) ? 1'b1 : 1'b0;
assign p[ 49] = (({ir, ix, ri, ia} & 28'b0000000000000000000000011111) == 28'b0000000000000000000000000000) ? 1'b1 : 1'b0;
assign p[ 50] = (({ir, ix, ri, ia} & 28'b0001000000111100000000111111) == 28'b0000000000001000000000011000) ? 1'b1 : 1'b0;
assign p[ 51] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111110) == 28'b0000000000000000000000111000) ? 1'b1 : 1'b0;
assign p[ 52] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000101111) ? 1'b1 : 1'b0;
assign p[ 53] = (({ir, ix, ri, ia} & 28'b0111011000000000000000010111) == 28'b0111000000000000000000000100) ? 1'b1 : 1'b0;
assign p[ 54] = (({ir, ix, ri, ia} & 28'b0000000010000000000000111101) == 28'b0000000010000000000000110001) ? 1'b1 : 1'b0;
assign p[ 55] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000010001) ? 1'b1 : 1'b0;
assign p[ 56] = (({ir, ix, ri, ia} & 28'b0000001000000000000000111111) == 28'b0000000000000000000000100001) ? 1'b1 : 1'b0;
assign p[ 57] = (({ir, ix, ri, ia} & 28'b0000100000111000000010111111) == 28'b0000000000001000000000111010) ? 1'b1 : 1'b0;
assign p[ 58] = (({ir, ix, ri, ia} & 28'b0000100000111101000000111111) == 28'b0000000000000101000000111010) ? 1'b1 : 1'b0;
assign p[ 59] = (({ir, ix, ri, ia} & 28'b0111000000000000000000010111) == 28'b0011000000000000000000000100) ? 1'b1 : 1'b0;
assign p[ 60] = (({ir, ix, ri, ia} & 28'b0001000000111001000000111111) == 28'b0000000000011000000000011000) ? 1'b1 : 1'b0;
assign p[ 61] = (({ir, ix, ri, ia} & 28'b0000111000000000010000111010) == 28'b0000010000000000000000110000) ? 1'b1 : 1'b0;
assign p[ 62] = (({ir, ix, ri, ia} & 28'b0000111000000000000000111111) == 28'b0000001000000000000000001010) ? 1'b1 : 1'b0;
assign p[ 63] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000010011) ? 1'b1 : 1'b0;
assign p[ 64] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000000110) ? 1'b1 : 1'b0;
assign p[ 65] = (({ir, ix, ri, ia} & 28'b0100100011000000100000111001) == 28'b0000000011000000000000001000) ? 1'b1 : 1'b0;
assign p[ 66] = (({ir, ix, ri, ia} & 28'b0000100000111111000000111111) == 28'b0000000000000001000000111010) ? 1'b1 : 1'b0;
assign p[ 67] = (({ir, ix, ri, ia} & 28'b0000000000101000001001111111) == 28'b0000000000000000001001101000) ? 1'b1 : 1'b0;
assign p[ 68] = (({ir, ix, ri, ia} & 28'b0000110000000000010000111111) == 28'b0000110000000000000000011000) ? 1'b1 : 1'b0;
assign p[ 69] = (({ir, ix, ri, ia} & 28'b0001000000000000000000011111) == 28'b0001000000000000000000000111) ? 1'b1 : 1'b0;
assign p[ 70] = (({ir, ix, ri, ia} & 28'b0000000110000000000000001110) == 28'b0000000110000000000000000100) ? 1'b1 : 1'b0;
assign p[ 71] = (({ir, ix, ri, ia} & 28'b0000000000000000000111011111) == 28'b0000000000000000000000011110) ? 1'b1 : 1'b0;
assign p[ 72] = (({ir, ix, ri, ia} & 28'b0000000001000000000000001110) == 28'b0000000001000000000000000100) ? 1'b1 : 1'b0;
assign p[ 73] = (({ir, ix, ri, ia} & 28'b0000000001000000000000111100) == 28'b0000000001000000000000110000) ? 1'b1 : 1'b0;
assign p[ 74] = (({ir, ix, ri, ia} & 28'b0000101000000010000000111111) == 28'b0000000000000010000000001110) ? 1'b1 : 1'b0;
assign p[ 75] = (({ir, ix, ri, ia} & 28'b0000010000000000000000011111) == 28'b0000000000000000000000000101) ? 1'b1 : 1'b0;
assign p[ 76] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000001101) ? 1'b1 : 1'b0;
assign p[ 77] = (({ir, ix, ri, ia} & 28'b0000100010011111000010111111) == 28'b0000000000010000000010111010) ? 1'b1 : 1'b0;
assign p[ 78] = (({ir, ix, ri, ia} & 28'b0000000000110000000000111111) == 28'b0000000000000000000000101000) ? 1'b1 : 1'b0;
assign p[ 79] = (({ir, ix, ri, ia} & 28'b0001000000110000000000111111) == 28'b0000000000110000000000011000) ? 1'b1 : 1'b0;
assign p[ 80] = (({ir, ix, ri, ia} & 28'b0000000000000000010000111101) == 28'b0000000000000000000000111001) ? 1'b1 : 1'b0;
assign p[ 81] = (({ir, ix, ri, ia} & 28'b0001000100000000000000111111) == 28'b0000000100000000000000001010) ? 1'b1 : 1'b0;
assign p[ 82] = (({ir, ix, ri, ia} & 28'b0010000000000000100000010111) == 28'b0000000000000000100000000100) ? 1'b1 : 1'b0;
assign p[ 83] = (({ir, ix, ri, ia} & 28'b0000001111000000100000111011) == 28'b0000001100000000000000001000) ? 1'b1 : 1'b0;
assign p[ 84] = (({ir, ix, ri, ia} & 28'b0000101000001000000000011111) == 28'b0000000000000000000000010110) ? 1'b1 : 1'b0;
assign p[ 85] = (({ir, ix, ri, ia} & 28'b0001000000101100000000111111) == 28'b0000000000001100000000011000) ? 1'b1 : 1'b0;
assign p[ 86] = (({ir, ix, ri, ia} & 28'b0001100001000000000000011111) == 28'b0000000001000000000000000111) ? 1'b1 : 1'b0;
assign p[ 87] = (({ir, ix, ri, ia} & 28'b0000011000000000000000111111) == 28'b0000010000000000000000011000) ? 1'b1 : 1'b0;
assign p[ 88] = (({ir, ix, ri, ia} & 28'b0001000000000000000000111011) == 28'b0000000000000000000000110001) ? 1'b1 : 1'b0;
assign p[ 89] = (({ir, ix, ri, ia} & 28'b0111000000000000000000010111) == 28'b0010000000000000000000000100) ? 1'b1 : 1'b0;
assign p[ 90] = (({ir, ix, ri, ia} & 28'b0000010000000000000000011111) == 28'b0000010000000000000000000111) ? 1'b1 : 1'b0;
assign p[ 91] = (({ir, ix, ri, ia} & 28'b0000000000111000000001111111) == 28'b0000000000011000000000101000) ? 1'b1 : 1'b0;
assign p[ 92] = (({ir, ix, ri, ia} & 28'b0000000100000000000000111100) == 28'b0000000100000000000000110000) ? 1'b1 : 1'b0;
assign p[ 93] = (({ir, ix, ri, ia} & 28'b0000000000000000000000011111) == 28'b0000000000000000000000010100) ? 1'b1 : 1'b0;
assign p[ 94] = (({ir, ix, ri, ia} & 28'b0001000100000100010000111111) == 28'b0000000000000000010000001010) ? 1'b1 : 1'b0;
assign p[ 95] = (({ir, ix, ri, ia} & 28'b1100010101000000100000111001) == 28'b0000010101000000000000001000) ? 1'b1 : 1'b0;
assign p[ 96] = (({ir, ix, ri, ia} & 28'b0000001000000000000000111111) == 28'b0000001000000000000000111010) ? 1'b1 : 1'b0;
assign p[ 97] = (({ir, ix, ri, ia} & 28'b0010100011000000000000111101) == 28'b0000000010000000000000001000) ? 1'b1 : 1'b0;
assign p[ 98] = (({ir, ix, ri, ia} & 28'b0000100000111111000000111111) == 28'b0000000000000100000000111010) ? 1'b1 : 1'b0;
assign p[ 99] = (({ir, ix, ri, ia} & 28'b0001001111000000100000111001) == 28'b0000001000000000000000001000) ? 1'b1 : 1'b0;
assign p[100] = (({ir, ix, ri, ia} & 28'b0000100000111111000010111111) == 28'b0000000000011001000010111010) ? 1'b1 : 1'b0;
assign p[101] = (({ir, ix, ri, ia} & 28'b0001000000110000000000111111) == 28'b0000000000100000000000011000) ? 1'b1 : 1'b0;
assign p[102] = (({ir, ix, ri, ia} & 28'b0000000000000000000001111111) == 28'b0000000000000000000000001011) ? 1'b1 : 1'b0;
assign p[103] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111110) == 28'b0000000000000000000000001100) ? 1'b1 : 1'b0;
assign p[104] = (({ir, ix, ri, ia} & 28'b0000100000111111000000111111) == 28'b0000000000000000000000111010) ? 1'b1 : 1'b0;
assign p[105] = (({ir, ix, ri, ia} & 28'b0000010000000000000000111111) == 28'b0000010000000000000000100110) ? 1'b1 : 1'b0;
assign p[106] = (({ir, ix, ri, ia} & 28'b0000000010000000000000110101) == 28'b0000000010000000000000110000) ? 1'b1 : 1'b0;
assign p[107] = (({ir, ix, ri, ia} & 28'b0000000000111000000000111111) == 28'b0000000000101000000000101000) ? 1'b1 : 1'b0;
assign p[108] = (({ir, ix, ri, ia} & 28'b0001011000000000000000111011) == 28'b0001000000000000000000001010) ? 1'b1 : 1'b0;
assign p[109] = (({ir, ix, ri, ia} & 28'b0000000000000000000100011111) == 28'b0000000000000000000100011110) ? 1'b1 : 1'b0;
assign p[110] = (({ir, ix, ri, ia} & 28'b0000001000000000000000011111) == 28'b0000001000000000000000010101) ? 1'b1 : 1'b0;
assign p[111] = (({ir, ix, ri, ia} & 28'b0000000000000000000010111111) == 28'b0000000000000000000000101110) ? 1'b1 : 1'b0;
assign p[112] = (({ir, ix, ri, ia} & 28'b0000100010011111000010111111) == 28'b0000000000010001000010111010) ? 1'b1 : 1'b0;
assign p[113] = (({ir, ix, ri, ia} & 28'b0000100010011011000000111111) == 28'b0000000000000010000000111010) ? 1'b1 : 1'b0;
assign p[114] = (({ir, ix, ri, ia} & 28'b0111100000000000100000010111) == 28'b0111000000000000100000000100) ? 1'b1 : 1'b0;
assign p[115] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000011100) ? 1'b1 : 1'b0;
assign p[116] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000100011) ? 1'b1 : 1'b0;
assign p[117] = (({ir, ix, ri, ia} & 28'b0000010101000000100000111011) == 28'b0000010100000000000000001000) ? 1'b1 : 1'b0;
assign p[118] = (({ir, ix, ri, ia} & 28'b0000110000000000000000111111) == 28'b0000100000000000000000011000) ? 1'b1 : 1'b0;
assign p[119] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000001111) ? 1'b1 : 1'b0;
assign p[120] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000110010) ? 1'b1 : 1'b0;
assign p[121] = (({ir, ix, ri, ia} & 28'b0000001111000000100000111011) == 28'b0000001111000000000000001000) ? 1'b1 : 1'b0;
assign p[122] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000011010) ? 1'b1 : 1'b0;
assign p[123] = (({ir, ix, ri, ia} & 28'b0000101000000010010000111111) == 28'b0000000000000000010000001110) ? 1'b1 : 1'b0;
assign p[124] = (({ir, ix, ri, ia} & 28'b0000111000000000010000111011) == 28'b0000011000000000010000110000) ? 1'b1 : 1'b0;
assign p[125] = (({ir, ix, ri, ia} & 28'b0000000010000000000000001011) == 28'b0000000010000000000000000000) ? 1'b1 : 1'b0;
assign p[126] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000011111) ? 1'b1 : 1'b0;
assign p[127] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000001001) ? 1'b1 : 1'b0;
assign p[128] = (({ir, ix, ri, ia} & 28'b0001000000000000000000111111) == 28'b0001000000000000000000100110) ? 1'b1 : 1'b0;
assign p[129] = (({ir, ix, ri, ia} & 28'b0000100010010100000000111101) == 28'b0000000000010100000000111000) ? 1'b1 : 1'b0;
assign p[130] = (({ir, ix, ri, ia} & 28'b0111000000000000100000010111) == 28'b0110000000000000100000000100) ? 1'b1 : 1'b0;
assign p[131] = (({ir, ix, ri, ia} & 28'b0000011000000000000000111011) == 28'b0000000000000000000000110000) ? 1'b1 : 1'b0;
assign p[132] = (({ir, ix, ri, ia} & 28'b0000000000011000000000111111) == 28'b0000000000000000000000101000) ? 1'b1 : 1'b0;
assign p[133] = (({ir, ix, ri, ia} & 28'b0000001000000000000000011111) == 28'b0000000000000000000000010101) ? 1'b1 : 1'b0;
assign p[134] = (({ir, ix, ri, ia} & 28'b0001100000000000000000111011) == 28'b0001100000000000000000001010) ? 1'b1 : 1'b0;
assign p[135] = (({ir, ix, ri, ia} & 28'b0000111000000000100000111101) == 28'b0000100000000000000000001100) ? 1'b1 : 1'b0;
assign p[136] = (({ir, ix, ri, ia} & 28'b0000100000111000000010111111) == 28'b0000000000001000000010111010) ? 1'b1 : 1'b0;
assign p[137] = (({ir, ix, ri, ia} & 28'b0000000000101000000001111111) == 28'b0000000000000000000000101000) ? 1'b1 : 1'b0;
assign p[138] = (({ir, ix, ri, ia} & 28'b0000000000000000000001111111) == 28'b0000000000000000000001001011) ? 1'b1 : 1'b0;
assign p[139] = (({ir, ix, ri, ia} & 28'b0000000000000000010000111101) == 28'b0000000000000000010000111001) ? 1'b1 : 1'b0;
assign p[140] = (({ir, ix, ri, ia} & 28'b0001000000101000000000110111) == 28'b0000000000000000000000010000) ? 1'b1 : 1'b0;
assign p[141] = (({ir, ix, ri, ia} & 28'b0000001000000000000000111111) == 28'b0000001000000000000000100001) ? 1'b1 : 1'b0;
assign p[142] = (({ir, ix, ri, ia} & 28'b0000110000000000010000111111) == 28'b0000110000000000010000011000) ? 1'b1 : 1'b0;
assign p[143] = (({ir, ix, ri, ia} & 28'b0000111010000000100000111111) == 28'b0000000000000000000000001100) ? 1'b1 : 1'b0;
assign p[144] = (({ir, ix, ri, ia} & 28'b0000000000000000010111101111) == 28'b0000000000000000010001101110) ? 1'b1 : 1'b0;
assign p[145] = (({ir, ix, ri, ia} & 28'b0000011000000010010000111111) == 28'b0000000000000010010000100110) ? 1'b1 : 1'b0;
assign p[146] = (({ir, ix, ri, ia} & 28'b0001011000000000000000111111) == 28'b0001000000000000000000011000) ? 1'b1 : 1'b0;
assign p[147] = (({ir, ix, ri, ia} & 28'b0000110101000000100000111001) == 28'b0000110001000000000000001000) ? 1'b1 : 1'b0;
assign p[148] = (({ir, ix, ri, ia} & 28'b0000000000111000000000111111) == 28'b0000000000111000000000101000) ? 1'b1 : 1'b0;
assign p[149] = (({ir, ix, ri, ia} & 28'b0000110000000000000000011111) == 28'b0000100000000000000000010110) ? 1'b1 : 1'b0;
assign p[150] = (({ir, ix, ri, ia} & 28'b0000100000000000000000111111) == 28'b0000100000000000000000001110) ? 1'b1 : 1'b0;
assign p[151] = (({ir, ix, ri, ia} & 28'b1000000000000000000000111111) == 28'b1000000000000000000000111010) ? 1'b1 : 1'b0;
assign p[152] = (({ir, ix, ri, ia} & 28'b0000000000000100000000010011) == 28'b0000000000000100000000000000) ? 1'b1 : 1'b0;
assign p[153] = (({ir, ix, ri, ia} & 28'b0000000000000000000111111111) == 28'b0000000000000000000001011110) ? 1'b1 : 1'b0;
assign p[154] = (({ir, ix, ri, ia} & 28'b0000110000000000000000111011) == 28'b0000010000000000000000001010) ? 1'b1 : 1'b0;
assign p[155] = (({ir, ix, ri, ia} & 28'b0000111000000000011000111010) == 28'b0000010000000000010000110000) ? 1'b1 : 1'b0;
assign p[156] = (({ir, ix, ri, ia} & 28'b0000000000000010000000010011) == 28'b0000000000000010000000000000) ? 1'b1 : 1'b0;
assign p[157] = (({ir, ix, ri, ia} & 28'b0000010000000000000000111111) == 28'b0000010000000000000000111010) ? 1'b1 : 1'b0;
assign p[158] = (({ir, ix, ri, ia} & 28'b0000000000000001000000010011) == 28'b0000000000000001000000000000) ? 1'b1 : 1'b0;
assign p[159] = (({ir, ix, ri, ia} & 28'b0000111000000000000000111010) == 28'b0000101000000000000000110000) ? 1'b1 : 1'b0;
assign p[160] = (({ir, ix, ri, ia} & 28'b0001100001000000000000011111) == 28'b0000000000000000000000000111) ? 1'b1 : 1'b0;
assign p[161] = (({ir, ix, ri, ia} & 28'b0000001000000000000000111110) == 28'b0000001000000000000000001110) ? 1'b1 : 1'b0;
assign p[162] = (({ir, ix, ri, ia} & 28'b0000100010010110000000111101) == 28'b0000000000010010000000111000) ? 1'b1 : 1'b0;
assign p[163] = (({ir, ix, ri, ia} & 28'b0111001110000000100000111011) == 28'b0000001010000000000000001000) ? 1'b1 : 1'b0;
assign p[164] = (({ir, ix, ri, ia} & 28'b0000000000111000000001111111) == 28'b0000000000011000000001101000) ? 1'b1 : 1'b0;
assign p[165] = (({ir, ix, ri, ia} & 28'b0000101000000000000000111111) == 28'b0000001000000000000000011000) ? 1'b1 : 1'b0;
assign p[166] = (({ir, ix, ri, ia} & 28'b0000110000000000000000011111) == 28'b0000100000000000000000000111) ? 1'b1 : 1'b0;
assign p[167] = (({ir, ix, ri, ia} & 28'b0000000000000000010111101111) == 28'b0000000000000000000001101110) ? 1'b1 : 1'b0;
assign p[168] = (({ir, ix, ri, ia} & 28'b0000110101000000100000111001) == 28'b0000110000000000000000001000) ? 1'b1 : 1'b0;
assign p[169] = (({ir, ix, ri, ia} & 28'b0000000000111000000000111111) == 28'b0000000000110000000000101000) ? 1'b1 : 1'b0;
assign p[170] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000010010) ? 1'b1 : 1'b0;
assign p[171] = (({ir, ix, ri, ia} & 28'b0000000000000000000000110110) == 28'b0000000000000000000000110100) ? 1'b1 : 1'b0;
assign p[172] = (({ir, ix, ri, ia} & 28'b0000111000000000010000111011) == 28'b0000011000000000000000110000) ? 1'b1 : 1'b0;
assign p[173] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000011101) ? 1'b1 : 1'b0;
assign p[174] = (({ir, ix, ri, ia} & 28'b0000000000000000000000011111) == 28'b0000000000000000000000000101) ? 1'b1 : 1'b0;
assign p[175] = (({ir, ix, ri, ia} & 28'b0000111000000000000000111010) == 28'b0000110000000000000000110000) ? 1'b1 : 1'b0;
assign p[176] = (({ir, ix, ri, ia} & 28'b0000000000000000000010111111) == 28'b0000000000000000000010101110) ? 1'b1 : 1'b0;
assign p[177] = (({ir, ix, ri, ia} & 28'b0000111000000000000000111010) == 28'b0000111000000000000000110000) ? 1'b1 : 1'b0;
assign p[178] = (({ir, ix, ri, ia} & 28'b0001000000000000000000011111) == 28'b0000000000000000000000010011) ? 1'b1 : 1'b0;
assign p[179] = (({ir, ix, ri, ia} & 28'b0111001111000000100000111001) == 28'b0000001110000000000000001000) ? 1'b1 : 1'b0;
assign p[180] = (({ir, ix, ri, ia} & 28'b0000000000000000000000101111) == 28'b0000000000000000000000000000) ? 1'b1 : 1'b0;
assign p[181] = (({ir, ix, ri, ia} & 28'b0001100000001000010000111111) == 28'b0000000000000000000000100110) ? 1'b1 : 1'b0;
assign p[182] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000010111) ? 1'b1 : 1'b0;
assign p[183] = (({ir, ix, ri, ia} & 28'b0000000000111000001001111111) == 28'b0000000000010000000001101000) ? 1'b1 : 1'b0;
assign p[184] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111101) == 28'b0000000000000000000000000000) ? 1'b1 : 1'b0;
assign p[185] = (({ir, ix, ri, ia} & 28'b0000001000000000000000011111) == 28'b0000001000000000000000010110) ? 1'b1 : 1'b0;
assign p[186] = (({ir, ix, ri, ia} & 28'b0111001011000000100000111001) == 28'b0000001001000000000000001000) ? 1'b1 : 1'b0;
assign p[187] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000000011) ? 1'b1 : 1'b0;
assign p[188] = (({ir, ix, ri, ia} & 28'b0000101000001000000000011111) == 28'b0000000000001000000000010110) ? 1'b1 : 1'b0;
assign p[189] = (({ir, ix, ri, ia} & 28'b0000000000000000000000101111) == 28'b0000000000000000000000101001) ? 1'b1 : 1'b0;
assign p[190] = (({ir, ix, ri, ia} & 28'b0000000000000000000000011111) == 28'b0000000000000000000000011001) ? 1'b1 : 1'b0;
assign p[191] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111111) == 28'b0000000000000000000000100010) ? 1'b1 : 1'b0;
assign p[192] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111110) == 28'b0000000000000000000000000000) ? 1'b1 : 1'b0;
assign p[193] = (({ir, ix, ri, ia} & 28'b0000000000000000000000110111) == 28'b0000000000000000000000110111) ? 1'b1 : 1'b0;
assign p[194] = (({ir, ix, ri, ia} & 28'b0000010000000000000000011111) == 28'b0000010000000000000000010110) ? 1'b1 : 1'b0;
assign p[195] = (({ir, ix, ri, ia} & 28'b0000000000000000000000101110) == 28'b0000000000000000000000101100) ? 1'b1 : 1'b0;
assign p[196] = (({ir, ix, ri, ia} & 28'b0000000000000000000000011111) == 28'b0000000000000000000000010000) ? 1'b1 : 1'b0;
assign p[197] = (({ir, ix, ri, ia} & 28'b0000000000000000000000011101) == 28'b0000000000000000000000001101) ? 1'b1 : 1'b0;
assign p[198] = (({ir, ix, ri, ia} & 28'b0000100000000000000000011111) == 28'b0000000000000000000000010011) ? 1'b1 : 1'b0;
assign p[199] = (({ir, ix, ri, ia} & 28'b0000000000000000000000111011) == 28'b0000000000000000000000110001) ? 1'b1 : 1'b0;

//
// Summ-Of-Products
//
assign sp = ~pl;
assign pl[0]   = p[170] | p[151] | p[134] | p[119] | p[104] | p[98]  | p[90]  | p[66]  | p[64]  | p[58]
               | p[57]  | p[51]  | p[46]  | p[32]  | p[29];

assign pl[1]   = p[199] | p[198] | p[197] | p[196] | p[194] | p[193] | p[192] | p[191] | p[189] | p[188]
               | p[185] | p[184] | p[183] | p[182] | p[181] | p[178] | p[176] | p[174] | p[173] | p[171]
               | p[170] | p[169] | p[167] | p[166] | p[165] | p[164] | p[162] | p[161] | p[160] | p[157]
               | p[154] | p[153] | p[151] | p[150] | p[149] | p[148] | p[146] | p[145] | p[144] | p[143]
               | p[142] | p[141] | p[140] | p[139] | p[138] | p[137] | p[136] | p[135] | p[134] | p[133]
               | p[132] | p[129] | p[128] | p[127] | p[126] | p[123] | p[122] | p[120] | p[116] | p[115]
               | p[114] | p[113] | p[112] | p[111] | p[110] | p[109] | p[108] | p[107] | p[106] | p[105]
               | p[104] | p[102] | p[101] | p[100] | p[98]  | p[97]  | p[96]  | p[93]  | p[91]  | p[87]
               | p[86]  | p[85]  | p[84]  | p[81]  | p[80]  | p[79]  | p[78]  | p[77]  | p[71]  | p[69]
               | p[68]  | p[67]  | p[62]  | p[57]  | p[55]  | p[51]  | p[50]  | p[49]  | p[47]  | p[46]
               | p[45]  | p[39]  | p[29]  | p[23];

assign pl[2]   = p[192] | p[191] | p[188] | p[184] | p[183] | p[181] | p[180] | p[177] | p[175] | p[173]
               | p[172] | p[169] | p[166] | p[164] | p[160] | p[159] | p[155] | p[153] | p[150] | p[148]
               | p[145] | p[137] | p[132] | p[131] | p[124] | p[113] | p[112] | p[107] | p[104] | p[102]
               | p[100] | p[91]  | p[78]  | p[76]  | p[61]  | p[58]  | p[55]  | p[42]  | p[17];

assign pl[3]   = p[192] | p[191] | p[189] | p[184] | p[183] | p[180] | p[177] | p[175] | p[173] | p[169]
               | p[167] | p[166] | p[164] | p[159] | p[157] | p[155] | p[148] | p[143] | p[141] | p[135]
               | p[132] | p[131] | p[124] | p[121] | p[118] | p[114] | p[107] | p[102] | p[100] | p[90]
               | p[89]  | p[76]  | p[60]  | p[59]  | p[55]  | p[52]  | p[40]  | p[36]  | p[32]  | p[28];

assign pl[4]   = p[193] | p[191] | p[190] | p[187] | p[185] | p[184] | p[182] | p[180] | p[176] | p[174]
               | p[173] | p[171] | p[165] | p[161] | p[146] | p[141] | p[138] | p[133] | p[128] | p[127]
               | p[122] | p[118] | p[116] | p[115] | p[111] | p[110] | p[109] | p[108] | p[103] | p[101]
               | p[96]  | p[93]  | p[87]  | p[85]  | p[84]  | p[80]  | p[79]  | p[77]  | p[74]  | p[71]
               | p[69]  | p[68]  | p[67]  | p[63]  | p[62]  | p[50]  | p[44]  | p[39];

assign pl[5]   = p[194] | p[193] | p[192] | p[191] | p[190] | p[189] | p[188] | p[187] | p[184] | p[182]
               | p[181] | p[180] | p[176] | p[173] | p[167] | p[166] | p[160] | p[157] | p[153] | p[152]
               | p[150] | p[149] | p[145] | p[144] | p[142] | p[141] | p[139] | p[138] | p[136] | p[127]
               | p[126] | p[122] | p[118] | p[116] | p[115] | p[113] | p[112] | p[111] | p[109] | p[105]
               | p[103] | p[101] | p[100] | p[96]  | p[92]  | p[86]  | p[85]  | p[84]  | p[81]  | p[80]
               | p[79]  | p[77]  | p[74]  | p[71]  | p[68]  | p[63]  | p[62]  | p[55]  | p[52]  | p[50]
               | p[39]  | p[25];

assign pl[6]   = p[197] | p[194] | p[192] | p[191] | p[189] | p[188] | p[187] | p[181] | p[180] | p[173]
               | p[171] | p[167] | p[166] | p[165] | p[160] | p[157] | p[156] | p[153] | p[150] | p[149]
               | p[145] | p[144] | p[142] | p[139] | p[136] | p[127] | p[126] | p[118] | p[116] | p[113]
               | p[108] | p[106] | p[103] | p[93]  | p[87]  | p[86]  | p[81]  | p[60]  | p[55]  | p[54]
               | p[39]  | p[25];

assign pl[7]   = p[197] | p[194] | p[193] | p[191] | p[189] | p[188] | p[187] | p[184] | p[180] | p[173]
               | p[171] | p[167] | p[158] | p[157] | p[153] | p[149] | p[146] | p[144] | p[142] | p[139]
               | p[138] | p[136] | p[128] | p[127] | p[126] | p[122] | p[118] | p[116] | p[115] | p[112]
               | p[110] | p[109] | p[105] | p[103] | p[100] | p[96]  | p[93]  | p[86]  | p[80]  | p[77]
               | p[73]  | p[71]  | p[68]  | p[62]  | p[39]  | p[34]  | p[25]  | p[21]  | p[12];

assign pl[8]   = p[192] | p[191] | p[189] | p[188] | p[187] | p[186] | p[184] | p[183] | p[182] | p[181]
               | p[179] | p[177] | p[176] | p[175] | p[172] | p[169] | p[167] | p[166] | p[164] | p[163]
               | p[162] | p[160] | p[159] | p[157] | p[155] | p[153] | p[150] | p[148] | p[145] | p[144]
               | p[142] | p[141] | p[139] | p[137] | p[136] | p[132] | p[131] | p[129] | p[128] | p[127]
               | p[124] | p[121] | p[120] | p[116] | p[113] | p[112] | p[111] | p[108] | p[107] | p[102]
               | p[100] | p[99]  | p[95]  | p[94]  | p[91]  | p[85]  | p[83]  | p[69]  | p[67]  | p[63]
               | p[61]  | p[55]  | p[52]  | p[50]  | p[45]  | p[36]  | p[10];

assign pl[9]   = p[199] | p[198] | p[195] | p[193] | p[191] | p[190] | p[186] | p[185] | p[179] | p[176]
               | p[165] | p[162] | p[161] | p[154] | p[149] | p[146] | p[143] | p[140] | p[139] | p[138]
               | p[136] | p[135] | p[127] | p[126] | p[122] | p[117] | p[115] | p[109] | p[108] | p[105]
               | p[102] | p[101] | p[96]  | p[95]  | p[87]  | p[86]  | p[84]  | p[81]  | p[80]  | p[79]
               | p[77]  | p[74]  | p[71]  | p[68]  | p[49]  | p[43]  | p[26];

assign pl[10]  = p[194] | p[193] | p[191] | p[190] | p[187] | p[185] | p[182] | p[178] | p[177] | p[175]
               | p[171] | p[169] | p[165] | p[164] | p[162] | p[161] | p[149] | p[148] | p[146] | p[143]
               | p[140] | p[138] | p[136] | p[135] | p[129] | p[127] | p[126] | p[124] | p[122] | p[121]
               | p[117] | p[116] | p[115] | p[111] | p[109] | p[105] | p[102] | p[101] | p[99]  | p[97]
               | p[96]  | p[88]  | p[87]  | p[86]  | p[85]  | p[84]  | p[83]  | p[81]  | p[80]  | p[79]
               | p[77]  | p[74]  | p[71]  | p[70]  | p[69]  | p[68]  | p[67]  | p[63]  | p[50]  | p[49]
               | p[45]  | p[44]  | p[43]  | p[38]  | p[27];

assign pl[11]  = p[197] | p[196] | p[195] | p[192] | p[190] | p[189] | p[188] | p[186] | p[184] | p[183]
               | p[182] | p[181] | p[179] | p[178] | p[176] | p[169] | p[167] | p[166] | p[164] | p[163]
               | p[162] | p[160] | p[153] | p[150] | p[148] | p[145] | p[144] | p[143] | p[141] | p[140]
               | p[137] | p[136] | p[135] | p[132] | p[129] | p[128] | p[127] | p[126] | p[125] | p[120]
               | p[116] | p[113] | p[112] | p[108] | p[107] | p[105] | p[100] | p[97]  | p[94]  | p[91]
               | p[88]  | p[86]  | p[85]  | p[84]  | p[74]  | p[70]  | p[67]  | p[56]  | p[55]  | p[50]
               | p[47]  | p[31]  | p[26];

assign pl[12]  = p[197] | p[195] | p[194] | p[193] | p[192] | p[190] | p[189] | p[188] | p[185] | p[184]
               | p[183] | p[181] | p[178] | p[177] | p[176] | p[175] | p[172] | p[169] | p[167] | p[166]
               | p[165] | p[164] | p[162] | p[161] | p[160] | p[159] | p[157] | p[155] | p[153] | p[150]
               | p[149] | p[148] | p[146] | p[145] | p[144] | p[142] | p[141] | p[140] | p[138] | p[136]
               | p[127] | p[126] | p[124] | p[123] | p[122] | p[115] | p[113] | p[112] | p[110] | p[109]
               | p[108] | p[107] | p[105] | p[101] | p[100] | p[97]  | p[96]  | p[95]  | p[91]  | p[88]
               | p[87]  | p[84]  | p[81]  | p[80]  | p[79]  | p[77]  | p[74]  | p[72]  | p[71]  | p[68]
               | p[67]  | p[55]  | p[49]  | p[48]  | p[47]  | p[34]  | p[26];

assign pl[13]  = p[192] | p[191] | p[189] | p[188] | p[187] | p[185] | p[184] | p[183] | p[181] | p[179]
               | p[177] | p[175] | p[172] | p[169] | p[167] | p[166] | p[163] | p[161] | p[160] | p[159]
               | p[157] | p[155] | p[153] | p[150] | p[148] | p[145] | p[144] | p[142] | p[141] | p[139]
               | p[137] | p[133] | p[132] | p[131] | p[130] | p[128] | p[121] | p[120] | p[113] | p[112]
               | p[107] | p[101] | p[100] | p[99]  | p[94]  | p[91]  | p[89]  | p[83]  | p[79]  | p[63]
               | p[61]  | p[59]  | p[58]  | p[55]  | p[52]  | p[35]  | p[24]  | p[22]  | p[19]  | p[16];

assign pl[14]  = p[191] | p[189] | p[188] | p[186] | p[185] | p[184] | p[182] | p[181] | p[180] | p[177]
               | p[175] | p[173] | p[172] | p[169] | p[168] | p[167] | p[161] | p[160] | p[157] | p[153]
               | p[150] | p[148] | p[147] | p[145] | p[139] | p[137] | p[133] | p[128] | p[118] | p[117]
               | p[114] | p[113] | p[112] | p[97]  | p[94]  | p[91]  | p[89]  | p[88]  | p[83 ] | p[78]
               | p[76]  | p[66]  | p[65]  | p[62]  | p[61]  | p[60]  | p[52]  | p[42]  | p[40]  | p[35]
               | p[28]  | p[13]  | p[9]   | p[6]   | p[5];

assign pl[15]  = p[187] | p[141] | p[101] | p[99] | p[64] | p[63] | p[59] | p[24];
assign pl[16]  = p[79]  | p[16];

assign pl[17]  = p[192] | p[191] | p[189] | p[188] | p[185] | p[184] | p[183] | p[182] | p[181] | p[180]
               | p[179] | p[177] | p[176] | p[175] | p[173] | p[172] | p[169] | p[168] | p[167] | p[166]
               | p[163] | p[161] | p[160] | p[159] | p[157] | p[155] | p[153] | p[150] | p[148] | p[147]
               | p[145] | p[144] | p[142] | p[139] | p[137] | p[133] | p[132] | p[131] | p[130] | p[128]
               | p[120] | p[118] | p[117] | p[114] | p[113] | p[112] | p[107] | p[104] | p[101] | p[100]
               | p[97]  | p[94]  | p[91]  | p[88]  | p[78]  | p[76]  | p[65]  | p[63]  | p[62]  | p[61]
               | p[60]  | p[55]  | p[52]  | p[42]  | p[40]  | p[35]  | p[28]  | p[24]  | p[20]  | p[19]
               | p[13]  | p[9];

assign pl[18]  = p[185] | p[119] | p[65]  | p[56]  | p[47]  | p[20] | p[7];
assign pl[19]  = p[185] | p[151] | p[147] | p[123] | p[119] | p[98] | p[56] | p[47];
assign pl[20]  = p[168] | p[151] | p[134] | p[119] | p[57]  | p[51] | p[46] | p[35];

assign pl[21]  = p[189] | p[183] | p[173] | p[169] | p[167] | p[164] | p[138] | p[137] | p[132] | p[112]
               | p[109] | p[100] | p[96]  | p[78]  | p[77]  | p[67]  | p[52];

assign pl[22]  = p[191] | p[189] | p[188] | p[184] | p[181] | p[180] | p[177] | p[175] | p[172] | p[167]
               | p[160] | p[159] | p[155] | p[153] | p[150] | p[148] | p[145] | p[138] | p[131] | p[124]
               | p[113] | p[112] | p[109] | p[107] | p[102] | p[96]  | p[91]  | p[77]  | p[76]  | p[61]
               | p[52]  | p[42];

assign pl[23]  = p[192] | p[189] | p[167] | p[166] | p[138] | p[100] | p[55]  | p[52];

assign pl[24]  = p[191] | p[184] | p[183] | p[181] | p[180] | p[177] | p[175] | p[173] | p[172] | p[169]
               | p[164] | p[160] | p[159] | p[155] | p[150] | p[148] | p[145] | p[138] | p[137] | p[132]
               | p[131] | p[124] | p[113] | p[109] | p[107] | p[102] | p[96]  | p[91]  | p[78]  | p[77]
               | p[76]  | p[67]  | p[61]  | p[42];

assign pl[25]  = p[186] | p[179] | p[168] | p[163] | p[154] | p[147] | p[133] | p[130] | p[128] | p[121]
               | p[99]  | p[95]  | p[89]  | p[83]  | p[82]  | p[65]  | p[59]  | p[43]  | p[40]  | p[22];

assign pl[26]  = p[186] | p[179] | p[168] | p[167] | p[154] | p[147] | p[141] | p[133] | p[130] | p[128]
               | p[121] | p[120] | p[118] | p[99]  | p[94]  | p[89]  | p[83]  | p[65]  | p[60]  | p[56]
               | p[40]  | p[25];

assign pl[27]  = p[190] | p[180] | p[177] | p[176] | p[175] | p[173] | p[171] | p[169] | p[164] | p[148]
               | p[140] | p[126] | p[124] | p[118] | p[111] | p[105] | p[103] | p[84]  | p[74]  | p[67]
               | p[49]  | p[44]  | p[38];

assign pl[28]  = p[199] | p[197] | p[194] | p[192] | p[191] | p[190] | p[189] | p[188] | p[187] | p[185]
               | p[184] | p[182] | p[181] | p[180] | p[178] | p[176] | p[174] | p[173] | p[172] | p[171]
               | p[170] | p[167] | p[166] | p[165] | p[161] | p[160] | p[159] | p[157] | p[154] | p[153]
               | p[151] | p[150] | p[146] | p[145] | p[144] | p[143] | p[141] | p[138] | p[137] | p[136]
               | p[135] | p[134] | p[133] | p[132] | p[131] | p[128] | p[127] | p[126] | p[123] | p[120]
               | p[118] | p[117] | p[116] | p[115] | p[114] | p[113] | p[112] | p[111] | p[110] | p[109]
               | p[108] | p[107] | p[104] | p[102] | p[100] | p[98]  | p[97]  | p[96]  | p[94]  | p[93]
               | p[91]  | p[90]  | p[87]  | p[85]  | p[84]  | p[81]  | p[78]  | p[77]  | p[74]  | p[69]
               | p[66]  | p[64]  | p[63]  | p[62]  | p[61]  | p[60]  | p[58]  | p[57]  | p[56]  | p[55]
               | p[51]  | p[50]  | p[47]  | p[46]  | p[45]  | p[42]  | p[36]  | p[32]  | p[29]  | p[25];

assign pl[29]  = p[191] | p[184] | p[183] | p[182] | p[180] | p[177] | p[175] | p[173] | p[169] | p[164]
               | p[157] | p[155] | p[154] | p[148] | p[143] | p[141] | p[135] | p[124] | p[123] | p[121]
               | p[118] | p[117] | p[114] | p[102] | p[97]  | p[89]  | p[88]  | p[76]  | p[60]  | p[59]
               | p[56]  | p[47]  | p[40]  | p[36]  | p[28]  | p[13]  | p[9];

assign pl[30]  = p[183] | p[175] | p[173] | p[169] | p[164] | p[155] | p[137] | p[132] | p[131] | p[124]
               | p[78]  | p[76]  | p[67]  | p[61]  | p[42]  | p[28];

assign pl[31]  = p[199] | p[192] | p[191] | p[184] | p[182] | p[180] | p[177] | p[176] | p[172] | p[170]
               | p[167] | p[166] | p[159] | p[154] | p[148] | p[143] | p[135] | p[133] | p[128] | p[127]
               | p[117] | p[116] | p[114] | p[111] | p[108] | p[107] | p[102] | p[97]  | p[91]  | p[90]
               | p[75]  | p[63]  | p[55]  | p[47]  | p[44]  | p[41]  | p[33]  | p[15]  | p[8];

assign pl[32]  = p[199] | p[198] | p[194] | p[193] | p[192] | p[191] | p[190] | p[188] | p[187] | p[186]
               | p[185] | p[182] | p[181] | p[180] | p[179] | p[178] | p[176] | p[168] | p[167] | p[165]
               | p[163] | p[162] | p[161] | p[157] | p[153] | p[151] | p[150] | p[149] | p[147] | p[146]
               | p[145] | p[144] | p[143] | p[142] | p[141] | p[140] | p[139] | p[135] | p[134] | p[130]
               | p[129] | p[127] | p[126] | p[123] | p[122] | p[121] | p[119] | p[118] | p[117] | p[115]
               | p[109] | p[105] | p[104] | p[102] | p[101] | p[99]  | p[98]  | p[97]  | p[95]  | p[94]
               | p[90]  | p[89]  | p[87]  | p[86]  | p[85]  | p[83]  | p[82]  | p[81]  | p[80]  | p[79]
               | p[71]  | p[68]  | p[66]  | p[65]  | p[64]  | p[62]  | p[60]  | p[59]  | p[58]  | p[57]
               | p[56]  | p[53]  | p[51]  | p[49]  | p[46]  | p[44]  | p[43]  | p[40]  | p[39]  | p[32]
               | p[30]  | p[29]  | p[14];

assign pl[33]  = p[198] | p[197] | p[196] | p[194] | p[193] | p[191] | p[190] | p[188] | p[186] | p[185]
               | p[183] | p[182] | p[181] | p[179] | p[178] | p[173] | p[169] | p[168] | p[167] | p[164]
               | p[163] | p[162] | p[161] | p[153] | p[151] | p[150] | p[149] | p[148] | p[147] | p[145]
               | p[144] | p[143] | p[142] | p[140] | p[139] | p[137] | p[135] | p[134] | p[132] | p[130]
               | p[129] | p[123] | p[122] | p[121] | p[117] | p[114] | p[109] | p[108] | p[107] | p[105]
               | p[104] | p[102] | p[101] | p[99]  | p[98]  | p[97]  | p[95]  | p[94]  | p[91]  | p[90]
               | p[89]  | p[86]  | p[84]  | p[83]  | p[82]  | p[81]  | p[80]  | p[79]  | p[78]  | p[75]
               | p[74]  | p[71]  | p[68]  | p[67]  | p[66]  | p[65]  | p[62]  | p[59]  | p[57]  | p[53]
               | p[51]  | p[50]  | p[49]  | p[46]  | p[43]  | p[41]  | p[40]  | p[39]  | p[32]  | p[29];

assign pl[34]  = p[199] | p[192] | p[190] | p[187] | p[182] | p[178] | p[176] | p[170] | p[166] | p[161]
               | p[160] | p[154] | p[150] | p[145] | p[143] | p[141] | p[138] | p[135] | p[133] | p[128]
               | p[126] | p[123] | p[117] | p[116] | p[114] | p[111] | p[108] | p[97]  | p[90]  | p[81]
               | p[75]  | p[63]  | p[62]  | p[47]  | p[41]  | p[32]  | p[25];

assign pl[35]  = p[194] | p[192] | p[190] | p[189] | p[187] | p[185] | p[183] | p[181] | p[177] | p[176]
               | p[173] | p[172] | p[171] | p[169] | p[165] | p[164] | p[161] | p[160] | p[159] | p[157]
               | p[150] | p[146] | p[143] | p[137] | p[135] | p[132] | p[128] | p[127] | p[126] | p[123]
               | p[118] | p[117] | p[114] | p[111] | p[109] | p[108] | p[97]  | p[94]  | p[93]  | p[87]
               | p[85]  | p[78]  | p[67]  | p[60]  | p[56]  | p[55]  | p[52]  | p[47]  | p[44]  | p[37]
               | p[25]  | p[18];

assign pl[36]  = p[194] | p[191] | p[190] | p[185] | p[184] | p[183] | p[181] | p[180] | p[177] | p[176]
               | p[174] | p[173] | p[172] | p[169] | p[165] | p[164] | p[159] | p[157] | p[149] | p[148]
               | p[146] | p[144] | p[142] | p[141] | p[139] | p[138] | p[137] | p[136] | p[132] | p[127]
               | p[126] | p[122] | p[120] | p[118] | p[116] | p[115] | p[113] | p[112] | p[111] | p[110]
               | p[107] | p[105] | p[102] | p[100] | p[96]  | p[94]  | p[91]  | p[87]  | p[86]  | p[85]
               | p[84]  | p[78]  | p[77]  | p[74]  | p[69]  | p[67]  | p[64]  | p[63]  | p[60]  | p[58]
               | p[56]  | p[55]  | p[50]  | p[49]  | p[45]  | p[36]  | p[30]  | p[11]  | p[4]   | p[3]
               | p[2];
endmodule

//______________________________________________________________________________
//
// Interrupt priority matrix input description:
//
//    rq[0]    - nACLO raising edge detector (nACLO restored)
//    rq[1]    - interrupt disable (both psw[7] & psw[8] are set)
//    rq[2]    - unused
//    rq[3]    - interrupt request HALT
//    rq[4]    - normal QBUS timeout
//    rq[5]    - vectored interrupt request (nVIRQ low level)
//    rq[6]    - nACLO falling edge detector (nACLO failed)
//    rq[7]    - nIAKO transaction flag (vector timeout detect)
//    rq[8]    - double QBUS timeout
//    rq[9]    - wait mode (waiting for interrupt)
//    rq[10]   - timer interrupt request nEVNT (falling edge)
//    rq[11]   - T-bit trap request (function of psw[4])
//    rq[12]   - RTT instruction T-bit supress
//    rq[13]   - psw[8]
//    rq[14]   - psw[7]
//    rq[15]   - AC0 matrix feedback (output sp[3])
//
// Interrupt priority matrix output description:
//
//    sp[0]    - vector generator selector  bit 3
//    sp[2]    - vector generator selector ~bit 2
//    sp[7]    - vector generator selector ~bit 1
//    sp[9]    - vector generator selector  bit 0
//
//    sp[3]    - feedback to priority matrix - AC0
//    sp[6]    - controls the request detectors rearm
//    sp[8]    - controls the request detectors rearm
//
//    sp[1]    - goes to the main matrix register ~ri[0]
//    sp[5]    - goes to the main matrix register ~ri[1]
//    sp[4]    - goes to the main matrix register  ri[2]
//
//______________________________________________________________________________
//
// 1801VM2 interrupt matrix
//
module vm2_pli
(
   input  [15:0] rq,
   output [9:0] sp
);
wire [23:0] p;
wire [9:0] pl;

wire  acok, aclo;          // ACLO detector requests
wire  halt, evnt, virq;    // external requests
wire  psw7, psw8;
wire  wcpu, mask, acin;
wire  iako, qbto, dble;    // qbus timeouts and odd address
wire  tbit, rtto;

assign acok    =  rq[0];   // nACLO raising edge detector
assign mask    =  rq[1];   // interrupt disable (psw[7] & psw[8])
assign halt    =  rq[3];   // interrupt request HALT
assign qbto    =  rq[4];   // normal QBUS timeout
assign virq    =  rq[5];   // vectored interrupt request
assign aclo    =  rq[6];   // nACLO falling edge detector
assign iako    =  rq[7];   // nIAKO transaction
assign dble    =  rq[8];   // double QBUS timeout
assign wcpu    =  rq[9];   // waiting for interrupt
assign evnt    =  rq[10];  // timer interrupt request nEVNT
assign tbit    =  rq[11];  // T-bit trap request (function of psw[4])
assign rtto    =  rq[12];  // RTT instruction T-bit ingibition
assign psw8    =  rq[13];  //
assign psw7    =  rq[14];  //
assign acin    =  rq[15];  // AC0 matrix feedback

function cmp
(
   input [10:0] ai,
   input [10:0] mi
);
begin
   casex(ai)
      mi:      cmp = 1'b1;
      default: cmp = 1'b0;
   endcase
end
endfunction

assign p[1]    = ~acin &  acok;
assign p[10]   = ~acin & ~acok;

assign p[6]    =  acin &  qbto &  iako;
assign p[2]    =  acin &  qbto & ~iako &  dble;
assign p[0]    =  acin &  qbto & ~iako & ~dble;
assign p[18]   =  acin &  qbto & ~iako & ~dble & psw8;

assign p[8]    =  acin & ~qbto                 &  tbit & ~wcpu;
assign p[12]   =  acin & ~qbto                 &  tbit & ~wcpu &  rtto;

assign p[15]   =  acin & ~qbto &  aclo & ~mask &  tbit &  wcpu;
assign p[17]   =  acin & ~qbto &  aclo &  mask         &  wcpu;
assign p[22]   =  acin & ~qbto &  aclo & ~mask & ~tbit;
assign p[13]   =  acin & ~qbto &  aclo &  mask & ~tbit & ~wcpu;

assign p[9]    =  acin & ~qbto & ~aclo & ~psw8 &  tbit &  wcpu &  halt;
assign p[21]   =  acin & ~qbto & ~aclo &  psw8         &  wcpu &  halt;
assign p[7]    =  acin & ~qbto & ~aclo & ~psw8 & ~tbit         &  halt;
assign p[11]   =  acin & ~qbto & ~aclo &  psw8 & ~tbit & ~wcpu &  halt;

assign p[5]    =  acin & ~qbto & ~aclo & ~psw7 &  tbit &  wcpu & ~halt &  evnt;
assign p[16]   =  acin & ~qbto & ~aclo &  psw7         &  wcpu & ~halt;
assign p[3]    =  acin & ~qbto & ~aclo & ~psw7 & ~tbit         & ~halt &  evnt;
assign p[4]    =  acin & ~qbto & ~aclo &  psw7 & ~tbit & ~wcpu & ~halt;

assign p[23]   =  acin & ~qbto & ~aclo & ~psw7         &  wcpu & ~halt & ~evnt &  virq;
assign p[20]   =  acin & ~qbto & ~aclo                 &  wcpu & ~halt & ~evnt & ~virq;
assign p[19]   =  acin & ~qbto & ~aclo & ~psw7 & ~tbit         & ~halt & ~evnt &  virq;
assign p[14]   =  acin & ~qbto & ~aclo         & ~tbit & ~wcpu & ~halt & ~evnt & ~virq;

assign sp      = ~pl;
assign pl[0]   = p[8]  | p[2]  | p[1]  | p[0];
assign pl[1]   = p[23] | p[19] | p[14] | p[13] | p[12] | p[11] | p[4]  | p[1];
assign pl[2]   = p[6]  | p[2]  | p[1]  | p[0];
assign pl[3]   = p[10];
assign pl[4]   = p[21] | p[20] | p[17] | p[16] | p[14] | p[13] | p[12] | p[11] | p[10] | p[4];
assign pl[5]   = p[18] | p[9]  | p[7]  | p[6]  | p[2]  | p[1];
assign pl[6]   = p[22] | p[15] | p[6]  | p[2]  | p[1]  | p[0];
assign pl[7]   = p[9]  | p[8]  | p[7]  | p[5]  | p[3]  | p[1];
assign pl[8]   = p[6]  | p[5]  | p[3]  | p[2]  | p[0];
assign pl[9]   = p[5]  | p[3]  | p[1]  | p[0];
endmodule

//______________________________________________________________________________
//
// 1801VM2 branch processing matrix
//
//    rq[0]    - instruction register [8]
//    rq[1]    - instruction register [9]
//    rq[2]    - instruction register [10]
//    rq[3]    - instruction register [12]
//    rq[4]    - instruction register [13]
//    rq[5]    - instruction register [14]
//    rq[6]    - instruction register [15]
//    rq[7]    - dc_b7
//    rq[8]    - C - psw[0]/cond_c
//    rq[9]    - V - psw[1]/cond_v
//    rq[10]   - N - psw[2]/cond_z
//    rq[11]   - Z - psw[3]/cond_n
//    rq[12]   - naf[4]
//    rq[13]   - naf[5]
//
module vm2_plb
(
   input  [13:0] rq,
   output sp
);
wire [19:0] p;

assign p[5 ] = ((rq[13:0] & 14'b11000001111111) == 14'b11000000000001) ? 1'b1 : 1'b0;
assign p[6 ] = ((rq[13:0] & 14'b01010001111111) == 14'b01000000000010) ? 1'b1 : 1'b0;
assign p[16] = ((rq[13:0] & 14'b11010001111011) == 14'b11010000000011) ? 1'b1 : 1'b0;
assign p[10] = ((rq[13:0] & 14'b11101001111111) == 14'b11000000000100) ? 1'b1 : 1'b0;
assign p[0 ] = ((rq[13:0] & 14'b11101001111111) == 14'b11101000000100) ? 1'b1 : 1'b0;
assign p[11] = ((rq[13:0] & 14'b11101001111101) == 14'b11001000000101) ? 1'b1 : 1'b0;
assign p[13] = ((rq[13:0] & 14'b11101001111101) == 14'b11100000000101) ? 1'b1 : 1'b0;
assign p[1 ] = ((rq[13:0] & 14'b01111001111101) == 14'b01000000000100) ? 1'b1 : 1'b0;
assign p[3 ] = ((rq[13:0] & 14'b01111001111111) == 14'b01101000000110) ? 1'b1 : 1'b0;
assign p[2 ] = ((rq[13:0] & 14'b11100001111111) == 14'b11000001000000) ? 1'b1 : 1'b0;
assign p[14] = ((rq[13:0] & 14'b11100001111111) == 14'b11100001000001) ? 1'b1 : 1'b0;
assign p[7 ] = ((rq[13:0] & 14'b01010101111111) == 14'b01000001000010) ? 1'b1 : 1'b0;
assign p[18] = ((rq[13:0] & 14'b11010000111111) == 14'b11010000000011) ? 1'b1 : 1'b0;
assign p[8 ] = ((rq[13:0] & 14'b11001001111111) == 14'b11000001000100) ? 1'b1 : 1'b0;
assign p[4 ] = ((rq[13:0] & 14'b11001001111111) == 14'b11001001000101) ? 1'b1 : 1'b0;
assign p[9 ] = ((rq[13:0] & 14'b11000101111011) == 14'b11000101000011) ? 1'b1 : 1'b0;
assign p[12] = ((rq[13:0] & 14'b11000101111111) == 14'b11000001000110) ? 1'b1 : 1'b0;
assign p[19] = ((rq[13:0] & 14'b11100000000000) == 14'b00000000000000) ? 1'b1 : 1'b0;
assign p[17] = ((rq[13:0] & 14'b11010000000000) == 14'b01000000000000) ? 1'b1 : 1'b0;
assign p[15] = ((rq[13:0] & 14'b11000010000000) == 14'b10000000000000) ? 1'b1 : 1'b0;

assign sp = ~|p[19:0];
endmodule

//______________________________________________________________________________
//
// 1801VM2 instruction predecoder matrix
//
module vm2_pld
(
   input  [15:0] rq,
   output [11:0] sp
);
wire [47:0] p;
wire [11:0] pl;

assign p[15] = ((rq[15:0] & 16'b1111111111111111) == 16'b0000000000000011) ? 1'b1 : 1'b0;
assign p[0 ] = ((rq[15:0] & 16'b1111111111111111) == 16'b0000000000000110) ? 1'b1 : 1'b0;
assign p[22] = ((rq[15:0] & 16'b0111111100000000) == 16'b0000000100000000) ? 1'b1 : 1'b0;
assign p[18] = ((rq[15:0] & 16'b1111111100000000) == 16'b1000000000000000) ? 1'b1 : 1'b0;
assign p[24] = ((rq[15:0] & 16'b1111011000000000) == 16'b1000000000000000) ? 1'b1 : 1'b0;
assign p[10] = ((rq[15:0] & 16'b1111111111111000) == 16'b0000000000001000) ? 1'b1 : 1'b0;
assign p[3 ] = ((rq[15:0] & 16'b1111111111110000) == 16'b0000000000010000) ? 1'b1 : 1'b0;
assign p[5 ] = ((rq[15:0] & 16'b1111111111100000) == 16'b0000000010100000) ? 1'b1 : 1'b0;
assign p[2 ] = ((rq[15:0] & 16'b1111111111000000) == 16'b0000110100000000) ? 1'b1 : 1'b0;
assign p[4 ] = ((rq[15:0] & 16'b1111100000111000) == 16'b0111000000000000) ? 1'b1 : 1'b0;
assign p[6 ] = ((rq[15:0] & 16'b1111111000111000) == 16'b0111100000000000) ? 1'b1 : 1'b0;
assign p[7 ] = ((rq[15:0] & 16'b1111111111100000) == 16'b0111101000000000) ? 1'b1 : 1'b0;
assign p[1 ] = ((rq[15:0] & 16'b1111111111111000) == 16'b1000110100000000) ? 1'b1 : 1'b0;
assign p[8 ] = ((rq[15:0] & 16'b0111111111111000) == 16'b0000110111000000) ? 1'b1 : 1'b0;
assign p[9 ] = ((rq[15:0] & 16'b0101111000111000) == 16'b0001000000000000) ? 1'b1 : 1'b0;
assign p[11] = ((rq[15:0] & 16'b0111111100111000) == 16'b0000110000000000) ? 1'b1 : 1'b0;
assign p[12] = ((rq[15:0] & 16'b1111111110111000) == 16'b0000000010000000) ? 1'b1 : 1'b0;
assign p[13] = ((rq[15:0] & 16'b1111010111000000) == 16'b0000000000000000) ? 1'b1 : 1'b0;
assign p[14] = ((rq[15:0] & 16'b0110111000111000) == 16'b0100000000000000) ? 1'b1 : 1'b0;
assign p[16] = ((rq[15:0] & 16'b0111111111000000) == 16'b0000101111000000) ? 1'b1 : 1'b0;
assign p[17] = ((rq[15:0] & 16'b1111111111111011) == 16'b0000000000000001) ? 1'b1 : 1'b0;
assign p[19] = ((rq[15:0] & 16'b1111111000111000) == 16'b0000100000000000) ? 1'b1 : 1'b0;
assign p[20] = ((rq[15:0] & 16'b1111111111111000) == 16'b0000000001000000) ? 1'b1 : 1'b0;
assign p[21] = ((rq[15:0] & 16'b0111100111100001) == 16'b0000000000000000) ? 1'b1 : 1'b0;
assign p[23] = ((rq[15:0] & 16'b0011111000111000) == 16'b0010000000000000) ? 1'b1 : 1'b0;
assign p[25] = ((rq[15:0] & 16'b0111111000111000) == 16'b0000101000000000) ? 1'b1 : 1'b0;
assign p[26] = ((rq[15:0] & 16'b1111000000000000) == 16'b0001000000000000) ? 1'b1 : 1'b0;
assign p[27] = ((rq[15:0] & 16'b1111111000000000) == 16'b0111111000000000) ? 1'b1 : 1'b0;
assign p[28] = ((rq[15:0] & 16'b1111001100000000) == 16'b0000000100000000) ? 1'b1 : 1'b0;
assign p[29] = ((rq[15:0] & 16'b0111111000000000) == 16'b0000001000000000) ? 1'b1 : 1'b0;
assign p[30] = ((rq[15:0] & 16'b1111111111000000) == 16'b1000110100000000) ? 1'b1 : 1'b0;
assign p[31] = ((rq[15:0] & 16'b0111110000000000) == 16'b0000010000000000) ? 1'b1 : 1'b0;
assign p[32] = ((rq[15:0] & 16'b0111100110000000) == 16'b0000000000000000) ? 1'b1 : 1'b0;
assign p[33] = ((rq[15:0] & 16'b0111111100000000) == 16'b0000110000000000) ? 1'b1 : 1'b0;
assign p[34] = ((rq[15:0] & 16'b1111111101000000) == 16'b0000000001000000) ? 1'b1 : 1'b0;
assign p[35] = ((rq[15:0] & 16'b0110111000000000) == 16'b0100000000000000) ? 1'b1 : 1'b0;
assign p[36] = ((rq[15:0] & 16'b0111111111000000) == 16'b0000110111000000) ? 1'b1 : 1'b0;
assign p[37] = ((rq[15:0] & 16'b1111111000000000) == 16'b0000100000000000) ? 1'b1 : 1'b0;
assign p[38] = ((rq[15:0] & 16'b1010000000000000) == 16'b1000000000000000) ? 1'b1 : 1'b0;
assign p[39] = ((rq[15:0] & 16'b1111111000000000) == 16'b0111100000000000) ? 1'b1 : 1'b0;
assign p[40] = ((rq[15:0] & 16'b0101111000000000) == 16'b0001000000000000) ? 1'b1 : 1'b0;
assign p[41] = ((rq[15:0] & 16'b0011111000000000) == 16'b0010000000000000) ? 1'b1 : 1'b0;
assign p[42] = ((rq[15:0] & 16'b0111111000000000) == 16'b0000101000000000) ? 1'b1 : 1'b0;
assign p[43] = ((rq[15:0] & 16'b1111100000000000) == 16'b0111000000000000) ? 1'b1 : 1'b0;
assign p[44] = ((rq[15:0] & 16'b1100000000000000) == 16'b1000000000000000) ? 1'b1 : 1'b0;
assign p[45] = ((rq[15:0] & 16'b0011000000000000) == 16'b0001000000000000) ? 1'b1 : 1'b0;
assign p[46] = ((rq[15:0] & 16'b0101000000000000) == 16'b0100000000000000) ? 1'b1 : 1'b0;
assign p[47] = ((rq[15:0] & 16'b0110000000000000) == 16'b0010000000000000) ? 1'b1 : 1'b0;


assign sp      = ~pl;
assign pl[1]   = 1'b0;
assign pl[2]   = p[0];
assign pl[0]   = p[43] | p[41] | p[40] | p[39] | p[35] | p[25] | p[20] | p[19] | p[12] | p[11] | p[8] | p[1];
assign pl[3]   = p[47] | p[43] | p[37] | p[32] | p[30] | p[16];
assign pl[4]   = p[37] | p[32] | p[28] | p[26] | p[13];
assign pl[5]   = p[42] | p[37] | p[36] | p[34] | p[33] | p[30] | p[12];
assign pl[6]   = p[43] | p[41] | p[40] | p[39] | p[35] | p[20] | p[19];
assign pl[7]   = p[47] | p[46] | p[45] | p[43] | p[39] | p[27];
assign pl[8]   = p[42] | p[37] | p[36] | p[34] | p[33] | p[30] | p[23] | p[14] | p[12] | p[9] | p[6] | p[4];
assign pl[9]   = p[31] | p[29] | p[27] | p[24] | p[22] | p[21] | p[20] | p[19] | p[17] | p[15] | p[10] | p[7] | p[5] | p[3] | p[2];
assign pl[10]  = p[44] | p[38];
assign pl[11]  = p[31] | p[29] | p[22] | p[20] | p[19] | p[18];
endmodule
